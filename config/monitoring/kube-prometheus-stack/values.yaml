grafana:
  service:
    type: LoadBalancer
  persistence:
    enabled: false
    storageClassName: standard
    accessModes:
      - ReadWriteOnce
    size: 4Gi
  adminPassword: admin
  initChownData:
    enabled: false
  envFromSecret: grafana-alerting-env

prometheus:
  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 8Gi

alertmanager:
  alertmanagerSpec:
    secrets:
      - alertmanager-slack-webhook
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: standard
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 4Gi


  extraConfigmapMounts:
    - name: grafana-alerting-provisioning
      mountPath: /etc/grafana/provisioning/alerting
      configMap: grafana-alerting-provisioning
      readOnly: true
      subPath: ""

  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['alertname','namespace']
      group_wait: 30s
      group_interval: 2m
      repeat_interval: 4h
      receiver: 'slack-notifications'
      routes:
        - matchers: [ severity="critical" ]
          receiver: 'slack-notifications'
    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - send_resolved: true
            api_url_file: '/etc/alertmanager/secrets/alertmanager-slack-webhook/url'
            channel: '#alerts'
            title: '{{ .CommonLabels.alertname }} ({{ .CommonLabels.severity }})'
            text: >-
              {{ range .Alerts -}}
              *{{ .Labels.namespace }}/{{ .Labels.pod | default .Labels.deployment | default "n/a" }}* {{ .Annotations.summary }}
              {{ if .Annotations.description }}\n{{ .Annotations.description }}{{ end }}
              {{ end }}